// Code generated by MockGen. DO NOT EDIT.
// Source: repository.go

// Package mocks is a generated GoMock package.
package mocks

import (
	context "context"
	reflect "reflect"
	time "time"

	models "gitbeam.commit.monitor/models"
	gomock "github.com/golang/mock/gomock"
)

// MockDataStore is a mock of DataStore interface.
type MockDataStore struct {
	ctrl     *gomock.Controller
	recorder *MockDataStoreMockRecorder
}

// MockDataStoreMockRecorder is the mock recorder for MockDataStore.
type MockDataStoreMockRecorder struct {
	mock *MockDataStore
}

// NewMockDataStore creates a new mock instance.
func NewMockDataStore(ctrl *gomock.Controller) *MockDataStore {
	mock := &MockDataStore{ctrl: ctrl}
	mock.recorder = &MockDataStoreMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockDataStore) EXPECT() *MockDataStoreMockRecorder {
	return m.recorder
}

// GetCommitBySHA mocks base method.
func (m *MockDataStore) GetCommitBySHA(ctx context.Context, owner models.OwnerAndRepoName, sha string) (*models.Commit, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetCommitBySHA", ctx, owner, sha)
	ret0, _ := ret[0].(*models.Commit)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetCommitBySHA indicates an expected call of GetCommitBySHA.
func (mr *MockDataStoreMockRecorder) GetCommitBySHA(ctx, owner, sha interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetCommitBySHA", reflect.TypeOf((*MockDataStore)(nil).GetCommitBySHA), ctx, owner, sha)
}

// GetLastCommit mocks base method.
func (m *MockDataStore) GetLastCommit(ctx context.Context, owner *models.OwnerAndRepoName, startTime *time.Time) (*models.Commit, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetLastCommit", ctx, owner, startTime)
	ret0, _ := ret[0].(*models.Commit)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetLastCommit indicates an expected call of GetLastCommit.
func (mr *MockDataStoreMockRecorder) GetLastCommit(ctx, owner, startTime interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetLastCommit", reflect.TypeOf((*MockDataStore)(nil).GetLastCommit), ctx, owner, startTime)
}

// GetTopCommitAuthors mocks base method.
func (m *MockDataStore) GetTopCommitAuthors(ctx context.Context, filter models.CommitFilters) ([]*models.TopCommitAuthor, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetTopCommitAuthors", ctx, filter)
	ret0, _ := ret[0].([]*models.TopCommitAuthor)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetTopCommitAuthors indicates an expected call of GetTopCommitAuthors.
func (mr *MockDataStoreMockRecorder) GetTopCommitAuthors(ctx, filter interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetTopCommitAuthors", reflect.TypeOf((*MockDataStore)(nil).GetTopCommitAuthors), ctx, filter)
}

// ListCommits mocks base method.
func (m *MockDataStore) ListCommits(ctx context.Context, filter models.CommitFilters) ([]*models.Commit, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListCommits", ctx, filter)
	ret0, _ := ret[0].([]*models.Commit)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListCommits indicates an expected call of ListCommits.
func (mr *MockDataStoreMockRecorder) ListCommits(ctx, filter interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListCommits", reflect.TypeOf((*MockDataStore)(nil).ListCommits), ctx, filter)
}

// SaveCommit mocks base method.
func (m *MockDataStore) SaveCommit(ctx context.Context, payload *models.Commit) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SaveCommit", ctx, payload)
	ret0, _ := ret[0].(error)
	return ret0
}

// SaveCommit indicates an expected call of SaveCommit.
func (mr *MockDataStoreMockRecorder) SaveCommit(ctx, payload interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SaveCommit", reflect.TypeOf((*MockDataStore)(nil).SaveCommit), ctx, payload)
}

// MockCronServiceStore is a mock of CronServiceStore interface.
type MockCronServiceStore struct {
	ctrl     *gomock.Controller
	recorder *MockCronServiceStoreMockRecorder
}

// MockCronServiceStoreMockRecorder is the mock recorder for MockCronServiceStore.
type MockCronServiceStoreMockRecorder struct {
	mock *MockCronServiceStore
}

// NewMockCronServiceStore creates a new mock instance.
func NewMockCronServiceStore(ctrl *gomock.Controller) *MockCronServiceStore {
	mock := &MockCronServiceStore{ctrl: ctrl}
	mock.recorder = &MockCronServiceStoreMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockCronServiceStore) EXPECT() *MockCronServiceStoreMockRecorder {
	return m.recorder
}

// DeleteMonitorConfig mocks base method.
func (m *MockCronServiceStore) DeleteMonitorConfig(ctx context.Context, owner models.OwnerAndRepoName) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteMonitorConfig", ctx, owner)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteMonitorConfig indicates an expected call of DeleteMonitorConfig.
func (mr *MockCronServiceStoreMockRecorder) DeleteMonitorConfig(ctx, owner interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteMonitorConfig", reflect.TypeOf((*MockCronServiceStore)(nil).DeleteMonitorConfig), ctx, owner)
}

// GetMonitorConfig mocks base method.
func (m *MockCronServiceStore) GetMonitorConfig(ctx context.Context, owner models.OwnerAndRepoName) (*models.MonitorRepositoryCommitConfig, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetMonitorConfig", ctx, owner)
	ret0, _ := ret[0].(*models.MonitorRepositoryCommitConfig)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetMonitorConfig indicates an expected call of GetMonitorConfig.
func (mr *MockCronServiceStoreMockRecorder) GetMonitorConfig(ctx, owner interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetMonitorConfig", reflect.TypeOf((*MockCronServiceStore)(nil).GetMonitorConfig), ctx, owner)
}

// ListMonitorConfig mocks base method.
func (m *MockCronServiceStore) ListMonitorConfig(ctx context.Context) ([]*models.MonitorRepositoryCommitConfig, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListMonitorConfig", ctx)
	ret0, _ := ret[0].([]*models.MonitorRepositoryCommitConfig)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListMonitorConfig indicates an expected call of ListMonitorConfig.
func (mr *MockCronServiceStoreMockRecorder) ListMonitorConfig(ctx interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListMonitorConfig", reflect.TypeOf((*MockCronServiceStore)(nil).ListMonitorConfig), ctx)
}

// SaveMonitorConfigs mocks base method.
func (m *MockCronServiceStore) SaveMonitorConfigs(ctx context.Context, task models.MonitorRepositoryCommitConfig) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SaveMonitorConfigs", ctx, task)
	ret0, _ := ret[0].(error)
	return ret0
}

// SaveMonitorConfigs indicates an expected call of SaveMonitorConfigs.
func (mr *MockCronServiceStoreMockRecorder) SaveMonitorConfigs(ctx, task interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SaveMonitorConfigs", reflect.TypeOf((*MockCronServiceStore)(nil).SaveMonitorConfigs), ctx, task)
}
